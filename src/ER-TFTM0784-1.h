#ifndef __ERTFT_H__
#define __ERTFT_H__

#include <Arduino.h>
#include <stdlib.h>
#include <stdint.h>
#include <avr/pgmspace.h>

#include "2828.h"
#include "touch.h"

// ----------------------------------------------------------------------------
// Declare the following externs in your sketch to configure your display
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// this sets the mode of communication with the RA8876
// ----------------------------------------------------------------------------

extern uint8_t mode_8876;  // 0: Parallel 16 bits 8080
                           // 1: Parallel 8 bit 8080
                           // 2: SPI

// ----------------------------------------------------------------------------
// Pins used in both serial and parallel modes
// ----------------------------------------------------------------------------

extern uint8_t RST_8876;   // chip reset
extern uint8_t NEXT_8876;  // a button used on the buydisplay C8051 demo board

// ----------------------------------------------------------------------------
// pins used in parallel 8/16 bit modes
// ----------------------------------------------------------------------------

extern uint8_t RS_8876;
extern uint8_t CS_PAR_8876;
extern uint8_t WR_8876;
extern uint8_t RD_8876;

extern uint8_t D0;
extern uint8_t D1;
extern uint8_t D2;
extern uint8_t D3;
extern uint8_t D4;
extern uint8_t D5;
extern uint8_t D6;
extern uint8_t D7;

// ----------------------------------------------------------------------------
// pins used in parallel 16 bit mode
// ----------------------------------------------------------------------------

extern uint8_t D8;
extern uint8_t D9;
extern uint8_t D10;
extern uint8_t D11;
extern uint8_t D12;
extern uint8_t D13;
extern uint8_t D14;
extern uint8_t D15;

extern volatile uint8_t * data_bus_l_dir; // used in 8 and 16 bit modes
extern volatile uint8_t * data_bus_l;  
extern volatile uint8_t * data_bus_l_in;

extern volatile uint8_t * data_bus_h_dir; // 16 bit mode only
extern volatile uint8_t * data_bus_h;     
extern volatile uint8_t * data_bus_h_in;

// ----------------------------------------------------------------------------
// pins used in SPI mode
// ----------------------------------------------------------------------------
extern uint32_t SPI_SPEED_8876;
extern uint8_t CS_SER_8876;
extern uint8_t SDI_8876;
extern uint8_t SDO_8876;
extern uint8_t SCLK_8876;

/*

old pin definitions from the original BuyDisplay demo code for C8051 

sbit     rs=P1^1;
sbit     cs=P1^0;
sbit     wr=P1^2;
sbit     rd=P1^3;
sbit next  =P3^5;    //next
sbit rst  =P3^7;     //next
#define DATA_BUS_L P0
#define DATA_BUS_H P2
*/



//----------------------------//

/*==== [HW_(3)]  SDRAM  =====*/
//#define IS42SM16160D
//#define IS42S16320B
//#define IS42S16400F 
//#define M12L32162A 
//#define M12L2561616A 
//#define W9825G6JH
//#define W9812G6JH
#define W9812G6KH
//#define MT48LC4M16A
//#define K4S641632N
//#define K4S281632K

//------------------------------------------------------------------------------
// Software Setting
//------------------------------------------------------------------------------
/*==== [SW_(1)]  PLL  =====*/
#define OSC_FREQ     10   // crystal clcok
#define DRAM_FREQ    100  // SDRAM clock frequency, unti: MHz       
#define CORE_FREQ    100  // Core (system) clock frequency, unit: MHz 
#define SCAN_FREQ     50 // Panel Scan clock frequency, unit: MHz  

//=====[05h] b3-b1=====//
//#define SCAN_DIVK1      // 000    
#define SCAN_DIVK2     // 001   
//#define SCAN_DIVK4      // 010
//#define SCAN_DIVK8      // 011 
//#define SCAN_DIVK16     // 100
//#define SCAN_DIVK32     // 101
//#define SCAN_DIVK64     // 110
//#define SCAN_DIVK128    // 111
//=====[05h] b0
#define SCAN_DIVM1        // 0
//#define SCAN_DIVM2      // 1 

//=====[07h] b3-b1
//#define DRAM_DIVK1      // 000 
#define DRAM_DIVK2        // 001
//#define DRAM_DIVK4      // 010
//#define DRAM_DIVK8      // 011
//=====[07h] b0
//#define DRAM_DIVM1      // 0
//#define DRAM_DIVM2   // 1

//=====[09h] b3-b1
//#define CORE_DIVK1      // 000
#define CORE_DIVK2     // 001
//#define CORE_DIVK4      // 010
//#define CORE_DIVK8      // 011  
//=====[09h] b0           
#define CORE_DIVM1        // 0
//#define CORE_DIVM2   // 1

#define color256_black   0x00
#define color256_white   0xff
#define color256_red     0xe0
#define color256_green   0x1c
#define color256_blue    0x03
#define color256_yellow  color256_red|color256_green
#define color256_cyan    color256_green|color256_blue
#define color256_purple  color256_red|color256_blue
 
#define color65k_black   0x0000
#define color65k_white   0xffff
#define color65k_red     0xf800
#define color65k_green   0x07e0
#define color65k_blue    0x001f
#define color65k_yellow  color65k_red|color65k_green
#define color65k_cyan    color65k_green|color65k_blue
#define color65k_purple  color65k_red|color65k_blue

#define color65k_grayscale1    2113
#define color65k_grayscale2    2113*2
#define color65k_grayscale3    2113*3
#define color65k_grayscale4    2113*4
#define color65k_grayscale5    2113*5
#define color65k_grayscale6    2113*6
#define color65k_grayscale7    2113*7
#define color65k_grayscale8    2113*8
#define color65k_grayscale9    2113*9
#define color65k_grayscale10   2113*10
#define color65k_grayscale11   2113*11
#define color65k_grayscale12   2113*12
#define color65k_grayscale13   2113*13
#define color65k_grayscale14   2113*14
#define color65k_grayscale15   2113*15
#define color65k_grayscale16   2113*16
#define color65k_grayscale17   2113*17
#define color65k_grayscale18   2113*18
#define color65k_grayscale19   2113*19
#define color65k_grayscale20   2113*20
#define color65k_grayscale21   2113*21
#define color65k_grayscale22   2113*22
#define color65k_grayscale23   2113*23
#define color65k_grayscale24   2113*24
#define color65k_grayscale25   2113*25
#define color65k_grayscale26   2113*26
#define color65k_grayscale27   2113*27
#define color65k_grayscale28   2113*28
#define color65k_grayscale29   2113*29
#define color65k_grayscale30   2113*30

#define color16M_black   0x00000000
#define color16M_white   0x00ffffff
#define color16M_red     0x00ff0000
#define color16M_green   0x0000ff00
#define color16M_blue    0x000000ff
#define color16M_yellow  color16M_red|color16M_green
#define color16M_cyan    color16M_green|color16M_blue
#define color16M_purple  color16M_red|color16M_blue

#define White          0xFFFF
#define Black          0x0000
#define Grey           0xF7DE
#define Blue           0x001F
#define Blue2          0x051F
#define Red            0xF800
#define Magenta        0xF81F
#define Green          0x07E0
#define Cyan           0x7FFF
#define Yellow         0xFFE0

#define Line0          0
#define Line1          24
#define Line2          48
#define Line3          72
#define Line4          96
#define Line5          120
#define Line6          144
#define Line7          168
#define Line8          192
#define Line9          216
#define Line10         240
#define Line11         264
#define Line12         288
#define Line13         312
#define Line14         336
#define Line15         360
#define Line16         384
#define Line17         408
#define Line18         432
#define Line19         456
#define Line20         480
#define Line21         504
#define Line22         528
#define Line23         552
#define Line24         576
#define Line25         600
#define Line26         624
#define Line27         648
#define Line28         672
#define Line29         696
#define Line30         720
#define Line31         744
#define Line32         768
#define Line33         792
#define Line34         816
#define Line35         840
#define Line36         864
#define Line37         888
#define Line38         912
#define Line39         936
#define Line40         960
#define Line41         984
#define Line42         1008
#define Line43         1032
#define Line44         1056
#define Line45         1080
#define Line46         1104
#define Line47         1128
#define Line48         1152
#define Line49         1176
#define Line50         1200
#define Line51         1224
#define Line52         1248

#define  cSetb0      0x01
#define  cSetb1      0x02
#define  cSetb2      0x04
#define  cSetb3      0x08
#define  cSetb4      0x10
#define  cSetb5      0x20
#define  cSetb6      0x40
#define  cSetb7      0x80

#define  cClrb0      0xfe
#define  cClrb1      0xfd
#define  cClrb2      0xfb
#define  cClrb3      0xf7
#define  cClrb4      0xef
#define  cClrb5      0xdf
#define  cClrb6      0xbf
#define  cClrb7      0x7f


const uint16_t ASCII_Table[] PROGMEM =
 {
   /* Space ' ' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '!' */
   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '"' */
   0x0000, 0x0000, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '#' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0C60, 0x0C60,
   0x0C60, 0x0630, 0x0630, 0x1FFE, 0x1FFE, 0x0630, 0x0738, 0x0318,
   0x1FFE, 0x1FFE, 0x0318, 0x0318, 0x018C, 0x018C, 0x018C, 0x0000,
   /* '$' */
   0x0000, 0x0080, 0x03E0, 0x0FF8, 0x0E9C, 0x1C8C, 0x188C, 0x008C,
   0x0098, 0x01F8, 0x07E0, 0x0E80, 0x1C80, 0x188C, 0x188C, 0x189C,
   0x0CB8, 0x0FF0, 0x03E0, 0x0080, 0x0080, 0x0000, 0x0000, 0x0000,
   /* '%' */
   0x0000, 0x0000, 0x0000, 0x180E, 0x0C1B, 0x0C11, 0x0611, 0x0611,
   0x0311, 0x0311, 0x019B, 0x018E, 0x38C0, 0x6CC0, 0x4460, 0x4460,
   0x4430, 0x4430, 0x4418, 0x6C18, 0x380C, 0x0000, 0x0000, 0x0000,
   /* '&' */
   0x0000, 0x01E0, 0x03F0, 0x0738, 0x0618, 0x0618, 0x0330, 0x01F0,
   0x00F0, 0x00F8, 0x319C, 0x330E, 0x1E06, 0x1C06, 0x1C06, 0x3F06,
   0x73FC, 0x21F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* ''' */
   0x0000, 0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '(' */
   0x0000, 0x0200, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x0060, 0x0060,
   0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030,
   0x0060, 0x0060, 0x00C0, 0x00C0, 0x0180, 0x0300, 0x0200, 0x0000,
   /* ')' */
   0x0000, 0x0020, 0x0060, 0x00C0, 0x0180, 0x0180, 0x0300, 0x0300,
   0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600,
   0x0300, 0x0300, 0x0180, 0x0180, 0x00C0, 0x0060, 0x0020, 0x0000,
   /* '*' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
   0x06D8, 0x07F8, 0x01E0, 0x0330, 0x0738, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '+' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x3FFC, 0x3FFC, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* ',' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0180, 0x0180, 0x0100, 0x0100, 0x0080, 0x0000, 0x0000,
   /* '-' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '.' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '/' */
   0x0000, 0x0C00, 0x0C00, 0x0600, 0x0600, 0x0600, 0x0300, 0x0300,
   0x0300, 0x0380, 0x0180, 0x0180, 0x0180, 0x00C0, 0x00C0, 0x00C0,
   0x0060, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '0' */
   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C18, 0x180C, 0x180C, 0x180C,
   0x180C, 0x180C, 0x180C, 0x180C, 0x180C, 0x180C, 0x0C18, 0x0E38,
   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '1' */
   0x0000, 0x0100, 0x0180, 0x01C0, 0x01F0, 0x0198, 0x0188, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '2' */
   0x0000, 0x03E0, 0x0FF8, 0x0C18, 0x180C, 0x180C, 0x1800, 0x1800,
   0x0C00, 0x0600, 0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018,
   0x1FFC, 0x1FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '3' */
   0x0000, 0x01E0, 0x07F8, 0x0E18, 0x0C0C, 0x0C0C, 0x0C00, 0x0600,
   0x03C0, 0x07C0, 0x0C00, 0x1800, 0x1800, 0x180C, 0x180C, 0x0C18,
   0x07F8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '4' */
   0x0000, 0x0C00, 0x0E00, 0x0F00, 0x0F00, 0x0D80, 0x0CC0, 0x0C60,
   0x0C60, 0x0C30, 0x0C18, 0x0C0C, 0x3FFC, 0x3FFC, 0x0C00, 0x0C00,
   0x0C00, 0x0C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '5' */
   0x0000, 0x0FF8, 0x0FF8, 0x0018, 0x0018, 0x000C, 0x03EC, 0x07FC,
   0x0E1C, 0x1C00, 0x1800, 0x1800, 0x1800, 0x180C, 0x0C1C, 0x0E18,
   0x07F8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '6' */
   0x0000, 0x07C0, 0x0FF0, 0x1C38, 0x1818, 0x0018, 0x000C, 0x03CC,
   0x0FEC, 0x0E3C, 0x1C1C, 0x180C, 0x180C, 0x180C, 0x1C18, 0x0E38,
   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '7' */
   0x0000, 0x1FFC, 0x1FFC, 0x0C00, 0x0600, 0x0600, 0x0300, 0x0380,
   0x0180, 0x01C0, 0x00C0, 0x00E0, 0x0060, 0x0060, 0x0070, 0x0030,
   0x0030, 0x0030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '8' */
   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C18, 0x0C18, 0x0C18, 0x0638,
   0x07F0, 0x07F0, 0x0C18, 0x180C, 0x180C, 0x180C, 0x180C, 0x0C38,
   0x0FF8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '9' */
   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C1C, 0x180C, 0x180C, 0x180C,
   0x1C1C, 0x1E38, 0x1BF8, 0x19E0, 0x1800, 0x0C00, 0x0C00, 0x0E1C,
   0x07F8, 0x01F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* ':' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* ';' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0180, 0x0180, 0x0100, 0x0100, 0x0080, 0x0000, 0x0000, 0x0000,
   /* '<' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x1000, 0x1C00, 0x0F80, 0x03E0, 0x00F8, 0x0018, 0x00F8, 0x03E0,
   0x0F80, 0x1C00, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '=' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x1FF8, 0x0000, 0x0000, 0x0000, 0x1FF8, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '>' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0008, 0x0038, 0x01F0, 0x07C0, 0x1F00, 0x1800, 0x1F00, 0x07C0,
   0x01F0, 0x0038, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '?' */
   0x0000, 0x03E0, 0x0FF8, 0x0C18, 0x180C, 0x180C, 0x1800, 0x0C00,
   0x0600, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x00C0, 0x0000, 0x0000,
   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '@' */
   0x0000, 0x0000, 0x07E0, 0x1818, 0x2004, 0x29C2, 0x4A22, 0x4411,
   0x4409, 0x4409, 0x4409, 0x2209, 0x1311, 0x0CE2, 0x4002, 0x2004,
   0x1818, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'A' */
   0x0000, 0x0380, 0x0380, 0x06C0, 0x06C0, 0x06C0, 0x0C60, 0x0C60,
   0x1830, 0x1830, 0x1830, 0x3FF8, 0x3FF8, 0x701C, 0x600C, 0x600C,
   0xC006, 0xC006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'B' */
   0x0000, 0x03FC, 0x0FFC, 0x0C0C, 0x180C, 0x180C, 0x180C, 0x0C0C,
   0x07FC, 0x0FFC, 0x180C, 0x300C, 0x300C, 0x300C, 0x300C, 0x180C,
   0x1FFC, 0x07FC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'C' */
   0x0000, 0x07C0, 0x1FF0, 0x3838, 0x301C, 0x700C, 0x6006, 0x0006,
   0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x6006, 0x700C, 0x301C,
   0x1FF0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'D' */
   0x0000, 0x03FE, 0x0FFE, 0x0E06, 0x1806, 0x1806, 0x3006, 0x3006,
   0x3006, 0x3006, 0x3006, 0x3006, 0x3006, 0x1806, 0x1806, 0x0E06,
   0x0FFE, 0x03FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'E' */
   0x0000, 0x3FFC, 0x3FFC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
   0x1FFC, 0x1FFC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
   0x3FFC, 0x3FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'F' */
   0x0000, 0x3FF8, 0x3FF8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
   0x1FF8, 0x1FF8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
   0x0018, 0x0018, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'G' */
   0x0000, 0x0FE0, 0x3FF8, 0x783C, 0x600E, 0xE006, 0xC007, 0x0003,
   0x0003, 0xFE03, 0xFE03, 0xC003, 0xC007, 0xC006, 0xC00E, 0xF03C,
   0x3FF8, 0x0FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'H' */
   0x0000, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
   0x3FFC, 0x3FFC, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
   0x300C, 0x300C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'I' */
   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'J' */
   0x0000, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600,
   0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0618, 0x0618, 0x0738,
   0x03F0, 0x01E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'K' */
   0x0000, 0x3006, 0x1806, 0x0C06, 0x0606, 0x0306, 0x0186, 0x00C6,
   0x0066, 0x0076, 0x00DE, 0x018E, 0x0306, 0x0606, 0x0C06, 0x1806,
   0x3006, 0x6006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'L' */
   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
   0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
   0x1FF8, 0x1FF8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'M' */
   0x0000, 0xE00E, 0xF01E, 0xF01E, 0xF01E, 0xD836, 0xD836, 0xD836,
   0xD836, 0xCC66, 0xCC66, 0xCC66, 0xC6C6, 0xC6C6, 0xC6C6, 0xC6C6,
   0xC386, 0xC386, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'N' */
   0x0000, 0x300C, 0x301C, 0x303C, 0x303C, 0x306C, 0x306C, 0x30CC,
   0x30CC, 0x318C, 0x330C, 0x330C, 0x360C, 0x360C, 0x3C0C, 0x3C0C,
   0x380C, 0x300C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'O' */
   0x0000, 0x07E0, 0x1FF8, 0x381C, 0x700E, 0x6006, 0xC003, 0xC003,
   0xC003, 0xC003, 0xC003, 0xC003, 0xC003, 0x6006, 0x700E, 0x381C,
   0x1FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'P' */
   0x0000, 0x0FFC, 0x1FFC, 0x380C, 0x300C, 0x300C, 0x300C, 0x300C,
   0x180C, 0x1FFC, 0x07FC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
   0x000C, 0x000C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'Q' */
   0x0000, 0x07E0, 0x1FF8, 0x381C, 0x700E, 0x6006, 0xE003, 0xC003,
   0xC003, 0xC003, 0xC003, 0xC003, 0xE007, 0x6306, 0x3F0E, 0x3C1C,
   0x3FF8, 0xF7E0, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'R' */
   0x0000, 0x0FFE, 0x1FFE, 0x3806, 0x3006, 0x3006, 0x3006, 0x3806,
   0x1FFE, 0x07FE, 0x0306, 0x0606, 0x0C06, 0x1806, 0x1806, 0x3006,
   0x3006, 0x6006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'S' */
   0x0000, 0x03E0, 0x0FF8, 0x0C1C, 0x180C, 0x180C, 0x000C, 0x001C,
   0x03F8, 0x0FE0, 0x1E00, 0x3800, 0x3006, 0x3006, 0x300E, 0x1C1C,
   0x0FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'T' */
   0x0000, 0x7FFE, 0x7FFE, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'U' */
   0x0000, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
   0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x1818,
   0x1FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'V' */
   0x0000, 0x6003, 0x3006, 0x3006, 0x3006, 0x180C, 0x180C, 0x180C,
   0x0C18, 0x0C18, 0x0E38, 0x0630, 0x0630, 0x0770, 0x0360, 0x0360,
   0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'W' */
   0x0000, 0x6003, 0x61C3, 0x61C3, 0x61C3, 0x3366, 0x3366, 0x3366,
   0x3366, 0x3366, 0x3366, 0x1B6C, 0x1B6C, 0x1B6C, 0x1A2C, 0x1E3C,
   0x0E38, 0x0E38, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'X' */
   0x0000, 0xE00F, 0x700C, 0x3018, 0x1830, 0x0C70, 0x0E60, 0x07C0,
   0x0380, 0x0380, 0x03C0, 0x06E0, 0x0C70, 0x1C30, 0x1818, 0x300C,
   0x600E, 0xE007, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'Y' */
   0x0000, 0xC003, 0x6006, 0x300C, 0x381C, 0x1838, 0x0C30, 0x0660,
   0x07E0, 0x03C0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'Z' */
   0x0000, 0x7FFC, 0x7FFC, 0x6000, 0x3000, 0x1800, 0x0C00, 0x0600,
   0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018, 0x000C, 0x0006,
   0x7FFE, 0x7FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '[' */
   0x0000, 0x03E0, 0x03E0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060,
   0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060,
   0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x03E0, 0x03E0, 0x0000,
   /* '\' */
   0x0000, 0x0030, 0x0030, 0x0060, 0x0060, 0x0060, 0x00C0, 0x00C0,
   0x00C0, 0x01C0, 0x0180, 0x0180, 0x0180, 0x0300, 0x0300, 0x0300,
   0x0600, 0x0600, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* ']' */
   0x0000, 0x03E0, 0x03E0, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300,
   0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300,
   0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x03E0, 0x03E0, 0x0000,
   /* '^' */
   0x0000, 0x0000, 0x01C0, 0x01C0, 0x0360, 0x0360, 0x0360, 0x0630,
   0x0630, 0x0C18, 0x0C18, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '_' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* ''' */
   0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'a' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03F0, 0x07F8,
   0x0C1C, 0x0C0C, 0x0F00, 0x0FF0, 0x0CF8, 0x0C0C, 0x0C0C, 0x0F1C,
   0x0FF8, 0x18F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'b' */
   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x03D8, 0x0FF8,
   0x0C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C38,
   0x0FF8, 0x03D8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'c' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x07F0,
   0x0E30, 0x0C18, 0x0018, 0x0018, 0x0018, 0x0018, 0x0C18, 0x0E30,
   0x07F0, 0x03C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'd' */
   0x0000, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1BC0, 0x1FF0,
   0x1C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C30,
   0x1FF0, 0x1BC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'e' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0FF0,
   0x0C30, 0x1818, 0x1FF8, 0x1FF8, 0x0018, 0x0018, 0x1838, 0x1C30,
   0x0FF0, 0x07C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'f' */
   0x0000, 0x0F80, 0x0FC0, 0x00C0, 0x00C0, 0x00C0, 0x07F0, 0x07F0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'g' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0DE0, 0x0FF8,
   0x0E18, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0E18,
   0x0FF8, 0x0DE0, 0x0C00, 0x0C0C, 0x061C, 0x07F8, 0x01F0, 0x0000,
   /* 'h' */
   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x07D8, 0x0FF8,
   0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818,
   0x1818, 0x1818, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'i' */
   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'j' */
   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00F8, 0x0078, 0x0000,
   /* 'k' */
   0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x0C0C, 0x060C,
   0x030C, 0x018C, 0x00CC, 0x006C, 0x00FC, 0x019C, 0x038C, 0x030C,
   0x060C, 0x0C0C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'l' */
   0x0000, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'm' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C7C, 0x7EFF,
   0xE3C7, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183,
   0xC183, 0xC183, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'n' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0798, 0x0FF8,
   0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818,
   0x1818, 0x1818, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'o' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0FF0,
   0x0C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C30,
   0x0FF0, 0x03C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'p' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03D8, 0x0FF8,
   0x0C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C38,
   0x0FF8, 0x03D8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0000,
   /* 'q' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1BC0, 0x1FF0,
   0x1C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C30,
   0x1FF0, 0x1BC0, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x0000,
   /* 'r' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07B0, 0x03F0,
   0x0070, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030,
   0x0030, 0x0030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 's' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03F0,
   0x0E38, 0x0C18, 0x0038, 0x03F0, 0x07C0, 0x0C00, 0x0C18, 0x0E38,
   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 't' */
   0x0000, 0x0000, 0x0080, 0x00C0, 0x00C0, 0x00C0, 0x07F0, 0x07F0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x07C0, 0x0780, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'u' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1818, 0x1818,
   0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C38,
   0x1FF0, 0x19E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'v' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x180C, 0x0C18,
   0x0C18, 0x0C18, 0x0630, 0x0630, 0x0630, 0x0360, 0x0360, 0x0360,
   0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'w' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x41C1, 0x41C1,
   0x61C3, 0x6363, 0x6363, 0x6363, 0x3636, 0x3636, 0x3636, 0x1C1C,
   0x1C1C, 0x1C1C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'x' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x381C, 0x1C38,
   0x0C30, 0x0660, 0x0360, 0x0360, 0x0360, 0x0360, 0x0660, 0x0C30,
   0x1C38, 0x381C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* 'y' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3018, 0x1830,
   0x1830, 0x1870, 0x0C60, 0x0C60, 0x0CE0, 0x06C0, 0x06C0, 0x0380,
   0x0380, 0x0380, 0x0180, 0x0180, 0x01C0, 0x00F0, 0x0070, 0x0000,
   /* 'z' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1FFC, 0x1FFC,
   0x0C00, 0x0600, 0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018,
   0x1FFC, 0x1FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   /* '{' */
   0x0000, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0,
   0x00C0, 0x0060, 0x0060, 0x0030, 0x0060, 0x0040, 0x00C0, 0x00C0,
   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x0180, 0x0300, 0x0000, 0x0000,
   /* '|' */
   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000,
   /* '}' */
   0x0000, 0x0060, 0x00C0, 0x01C0, 0x0180, 0x0180, 0x0180, 0x0180,
   0x0180, 0x0300, 0x0300, 0x0600, 0x0300, 0x0100, 0x0180, 0x0180,
   0x0180, 0x0180, 0x0180, 0x0180, 0x00C0, 0x0060, 0x0000, 0x0000,
   /* '~' */
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x10F0, 0x1FF8, 0x0F08, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
};


 const uint8_t gImage_busy_im[256] PROGMEM = 
{ /* 0x00,0x02,0x20,0x00,0x20,0x00, */
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x55,0x55,0x55,0x55,0x6A,0xAA,
0xAA,0xAA,0x54,0x00,0x00,0x05,0x6A,0xAA,0xAA,0xAA,0x55,0x55,0x55,0x55,0x6A,0xAA,
0xAA,0xAA,0x94,0x00,0x00,0x05,0xAA,0xAA,0xAA,0xAA,0x94,0x00,0x00,0x05,0xAA,0xAA,
0xAA,0xAA,0x94,0x44,0x44,0x45,0xAA,0xAA,0xAA,0xAA,0x94,0x11,0x11,0x05,0xAA,0xAA,
0xAA,0xAA,0x95,0x04,0x44,0x15,0xAA,0xAA,0xAA,0xAA,0xA5,0x41,0x10,0x56,0xAA,0xAA,
0xAA,0xAA,0xA9,0x50,0x41,0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0x54,0x05,0x6A,0xAA,0xAA,
0xAA,0xAA,0xAA,0x94,0x05,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x94,0x05,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0x94,0x45,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x94,0x05,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0x50,0x01,0x6A,0xAA,0xAA,0xAA,0xAA,0xA9,0x40,0x40,0x5A,0xAA,0xAA,
0xAA,0xAA,0xA5,0x00,0x10,0x16,0xAA,0xAA,0xAA,0xAA,0x94,0x00,0x00,0x05,0xAA,0xAA,
0xAA,0xAA,0x94,0x04,0x44,0x05,0xAA,0xAA,0xAA,0xAA,0x94,0x11,0x11,0x05,0xAA,0xAA,
0xAA,0xAA,0x94,0x44,0x44,0x45,0xAA,0xAA,0xAA,0xAA,0x95,0x11,0x11,0x15,0xAA,0xAA,
0xAA,0xAA,0x55,0x55,0x55,0x55,0x6A,0xAA,0xAA,0xAA,0x54,0x00,0x00,0x05,0x6A,0xAA,
0xAA,0xAA,0x55,0x55,0x55,0x55,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
};


const uint8_t gImage_no_im[256] PROGMEM = 
{ /* 0x00,0x02,0x20,0x00,0x20,0x00, */
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x95,0x55,0xAA,0xAA,0xAA,
0xAA,0xAA,0xA9,0x40,0x00,0x5A,0xAA,0xAA,0xAA,0xAA,0x94,0x00,0x00,0x05,0xAA,0xAA,
0xAA,0xAA,0x40,0x00,0x00,0x00,0x6A,0xAA,0xAA,0xA9,0x00,0x15,0x55,0x00,0x1A,0xAA,
0xAA,0xA4,0x00,0x6A,0xAA,0x50,0x06,0xAA,0xAA,0xA4,0x00,0x6A,0xAA,0xA4,0x06,0xAA,
0xAA,0x90,0x00,0x1A,0xAA,0xA9,0x01,0xAA,0xAA,0x90,0x10,0x06,0xAA,0xA9,0x01,0xAA,
0xAA,0x40,0x64,0x01,0xAA,0xAA,0x40,0x6A,0xAA,0x40,0x69,0x00,0x6A,0xAA,0x40,0x6A,
0xAA,0x40,0x6A,0x40,0x1A,0xAA,0x40,0x6A,0xAA,0x40,0x6A,0x90,0x06,0xAA,0x40,0x6A,
0xAA,0x40,0x6A,0xA4,0x01,0xAA,0x40,0x6A,0xAA,0x40,0x6A,0xA9,0x00,0x6A,0x40,0x6A,
0xAA,0x40,0x6A,0xAA,0x40,0x1A,0x40,0x6A,0xAA,0x90,0x1A,0xAA,0x90,0x05,0x01,0xAA,
0xAA,0x90,0x1A,0xAA,0xA4,0x00,0x01,0xAA,0xAA,0xA4,0x06,0xAA,0xA9,0x00,0x06,0xAA,
0xAA,0xA4,0x01,0x6A,0xAA,0x40,0x06,0xAA,0xAA,0xA9,0x00,0x15,0x55,0x00,0x1A,0xAA,
0xAA,0xAA,0x40,0x00,0x00,0x00,0x6A,0xAA,0xAA,0xAA,0x94,0x00,0x00,0x05,0xAA,0xAA,
0xAA,0xAA,0xA9,0x40,0x00,0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0x95,0x55,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
};

const uint8_t gImage_arrow_il[256] PROGMEM = 
{ /* 0x00,0x02,0x20,0x00,0x20,0x00, */
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x46,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0x41,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0x40,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x06,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0x40,0x01,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x00,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,
0x40,0x00,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x00,0x06,0xAA,0xAA,0xAA,0xAA,0xAA,
0x40,0x00,0x01,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x00,0x00,0x6A,0xAA,0xAA,0xAA,0xAA,
0x40,0x00,0x00,0x1A,0xAA,0xAA,0xAA,0xAA,0x40,0x00,0x00,0x06,0xAA,0xAA,0xAA,0xAA,
0x40,0x00,0x00,0x01,0xAA,0xAA,0xAA,0xAA,0x40,0x00,0x00,0x00,0x6A,0xAA,0xAA,0xAA,
0x40,0x00,0x15,0x55,0x5A,0xAA,0xAA,0xAA,0x40,0x10,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,
0x40,0x64,0x06,0xAA,0xAA,0xAA,0xAA,0xAA,0x41,0xA4,0x06,0xAA,0xAA,0xAA,0xAA,0xAA,
0x46,0xA9,0x01,0xAA,0xAA,0xAA,0xAA,0xAA,0x5A,0xA9,0x01,0xAA,0xAA,0xAA,0xAA,0xAA,
0x6A,0xAA,0x40,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x6A,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0x90,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x90,0x1A,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0xA4,0x06,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xA4,0x06,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0xA9,0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
};

const uint8_t gImage_pen_il[256] PROGMEM = 
{ /* 0x00,0x02,0x20,0x00,0x20,0x00, */
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0x96,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x91,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
0xA4,0x15,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xA4,0x00,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,
0xA9,0x01,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0xA9,0x00,0x46,0xAA,0xAA,0xAA,0xAA,0xAA,
0xAA,0x40,0x51,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x90,0x14,0x6A,0xAA,0xAA,0xAA,0xAA,
0xAA,0xA4,0x05,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0xA9,0x01,0x46,0xAA,0xAA,0xAA,0xAA,
0xAA,0xAA,0x40,0x51,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x90,0x14,0x6A,0xAA,0xAA,0xAA,
0xAA,0xAA,0xA4,0x05,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0xA9,0x01,0x46,0xAA,0xAA,0xAA,
0xAA,0xAA,0xAA,0x40,0x51,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x90,0x14,0x69,0xAA,0xAA,
0xAA,0xAA,0xAA,0xA4,0x01,0x14,0x6A,0xAA,0xAA,0xAA,0xAA,0xA9,0x00,0x44,0x1A,0xAA,
0xAA,0xAA,0xAA,0xAA,0x40,0x11,0x06,0xAA,0xAA,0xAA,0xAA,0xAA,0x90,0x04,0x41,0xAA,
0xAA,0xAA,0xAA,0xAA,0xA4,0x01,0x10,0x6A,0xAA,0xAA,0xAA,0xAA,0xA9,0x00,0x44,0x1A,
0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x11,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0x90,0x04,0x1A,
0xAA,0xAA,0xAA,0xAA,0xAA,0xA4,0x01,0x1A,0xAA,0xAA,0xAA,0xAA,0xAA,0xA9,0x00,0x1A,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x40,0x6A,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0x95,0xAA,
0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,0xAA,
};


//--
 
void LCD_DataWrite(uint8_t data);
void LCD_DataWrite16(uint16_t data);
uint16_t LCD_DataRead(void);
void LCD_CmdWrite(uint8_t Cmd);
uint8_t LCD_StatusRead(void);

void LCD_RegisterWrite(uint8_t Cmd,uint8_t Data);
uint8_t LCD_RegisterRead(uint8_t Cmd);


void RA8876_initial(void);
//Set PLL
void RA8876_PLL_Initial(void); 
//Set SDRAM 
void RA8876_SDRAM_initail(void);




//**Staus**//
void Check_Mem_WR_FIFO_not_Full(void);
void Check_Mem_WR_FIFO_Empty(void);
void Check_Mem_RD_FIFO_not_Full(void);
void Check_Mem_RD_FIFO_not_Empty(void);
void Check_2D_Busy(void);
void Check_SDRAM_Ready(void);
uint8_t Power_Saving_Status(void);
void Check_Power_is_Normal(void);//�O Normal mode �N���}
void Check_Power_is_Saving(void);//�O Saving mode �N���}
void Check_NO_Interrupt(void);//�S�� Interrupt �N���}
void Check_Interrupt_Occur(void);//�� Interrupt �N���}

void Check_Busy_Draw(void);
void Check_Busy_SFI_DMA(void);

//**[00h]**//
void RA8876_SW_Reset(void);
//**[01h]**//
void Enable_PLL(void);
void RA8876_Sleep(void);
void RA8876_WakeUp(void);
void TFT_24bit(void);
void TFT_18bit(void);
void TFT_16bit(void);
void TFT_LVDS(void);
void Key_Scan_Enable(void);
void Key_Scan_Disable(void);
void RA8876_I2CM_Enable(void);
void RA8876_I2CM_Disable(void);
void Enable_SFlash_SPI(void);
void Disable_SFlash_SPI(void);
void Host_Bus_8bit(void);
void Host_Bus_16bit(void);
//**[02h]**//

void RGB_8b_8bpp(void);
void RGB_8b_16bpp(void);
void RGB_8b_24bpp(void);

void RGB_16b_8bpp(void);
void RGB_16b_16bpp(void);
void RGB_16b_24bpp_mode1(void);
void RGB_16b_24bpp_mode2(void);

void MemRead_Left_Right_Top_Down(void);
void MemRead_Right_Left_Top_Down(void);
void MemRead_Top_Down_Left_Right(void);
void MemRead_Down_Top_Left_Right(void);

void MemWrite_Left_Right_Top_Down(void);
void MemWrite_Right_Left_Top_Down(void);
void MemWrite_Top_Down_Left_Right(void);
void MemWrite_Down_Top_Left_Right(void);
//**[03h]**//
void Interrupt_Active_Low(void);
void Interrupt_Active_High(void);
void ExtInterrupt_Debounce(void);
void ExtInterrupt_Nodebounce(void);
void ExtInterrupt_Input_Low_Level_Trigger(void);
void ExtInterrupt_Input_High_Level_Trigger(void);
void ExtInterrupt_Input_Falling_Edge_Trigger(void);
void ExtInterrupt_Input_Rising_Edge_Trigger(void);
void LVDS_Format1(void);
void LVDS_Format2(void);
void Graphic_Mode(void);
void Text_Mode(void);
void Memory_Select_SDRAM(void);
void Memory_Select_Graphic_Cursor_RAM(void);
void Memory_Select_Color_Palette_RAM(void);
//**[05h]**//
//**[06h]**//
//**[07h]**//
//**[09h]**//
//**[0Ah]**//
//**[0Bh]**//
void Enable_Resume_Interrupt(void);
void Disable_Resume_Interrupt(void);
void Enable_ExtInterrupt_Input(void);
void Disable_ExtInterrupt_Input(void);
void Enable_I2CM_Interrupt(void);
void Disable_I2CM_Interrupt(void);
void Enable_Vsync_Interrupt(void);
void Disable_Vsync_Interrupt(void);
void Enable_KeyScan_Interrupt(void);
void Disable_KeyScan_Interrupt(void);
void Enable_DMA_Draw_BTE_Interrupt(void);
void Disable_DMA_Draw_BTE_Interrupt(void);
void Enable_PWM1_Interrupt(void);
void Disable_PWM1_Interrupt(void);
void Enable_PWM0_Interrupt(void);
void Disable_PWM0_Interrupt(void);
//**[0Ch]**//
uint8_t Read_Interrupt_status(void);
void Clear_Resume_Interrupt_Flag(void);
void Clear_ExtInterrupt_Input_Flag(void);
void Clear_I2CM_Interrupt_Flag(void);
void Clear_Vsync_Interrupt_Flag(void);
void Clear_KeyScan_Interrupt_Flag(void);
void Clear_DMA_Draw_BTE_Interrupt_Flag(void);
void Clear_PWM1_Interrupt_Flag(void);
void Clear_PWM0_Interrupt_Flag(void);
//**[0Dh]**//
void Mask_Resume_Interrupt_Flag(void);
void Mask_ExtInterrupt_Input_Flag(void);
void Mask_I2CM_Interrupt_Flag(void);
void Mask_Vsync_Interrupt_Flag(void);
void Mask_KeyScan_Interrupt_Flag(void);
void Mask_DMA_Draw_BTE_Interrupt_Flag(void);
void Mask_PWM1_Interrupt_Flag(void);
void Mask_PWM0_Interrupt_Flag(void);
//
void Enable_Resume_Interrupt_Flag(void);
void Enable_ExtInterrupt_Input_Flag(void);
void Enable_I2CM_Interrupt_Flag(void);
void Enable_Vsync_Interrupt_Flag(void);
void Enable_KeyScan_Interrupt_Flag(void);
void Enable_DMA_Draw_BTE_Interrupt_Flag(void);
void Enable_PWM1_Interrupt_Flag(void);
void Enable_PWM0_Interrupt_Flag(void);
//**[0Eh]**//
void Enable_GPIOF_PullUp(void);
void Enable_GPIOE_PullUp(void);
void Enable_GPIOD_PullUp(void);
void Enable_GPIOC_PullUp(void);
void Enable_XDB15_8_PullUp(void);
void Enable_XDB7_0_PullUp(void);
void Disable_GPIOF_PullUp(void);
void Disable_GPIOE_PullUp(void);
void Disable_GPIOD_PullUp(void);
void Disable_GPIOC_PullUp(void);
void Disable_XDB15_8_PullUp(void);
void Disable_XDB7_0_PullUp(void);

//**[0Fh]**//
void XPDAT18_Set_GPIO_D7(void);
void XPDAT18_Set_KOUT4(void);
void XPDAT17_Set_GPIO_D5(void);
void XPDAT17_Set_KOUT2(void);
void XPDAT16_Set_GPIO_D4(void);
void XPDAT16_Set_KOUT1(void);
void XPDAT9_Set_GPIO_D3(void);
void XPDAT9_Set_KOUT3(void);
void XPDAT8_Set_GPIO_D2(void);
void XPDAT8_Set_KIN3(void);
void XPDAT2_Set_GPIO_D6(void);
void XPDAT2_Set_KIN4(void);
void XPDAT1_Set_GPIO_D1(void);
void XPDAT1_Set_KIN2(void);
void XPDAT0_Set_GPIO_D0(void);
void XPDAT0_Set_KIN1(void);

//**[10h]**//
void Enable_PIP1(void);
void Disable_PIP1(void);
void Enable_PIP2(void);
void Disable_PIP2(void);
void Select_PIP1_Parameter(void);
void Select_PIP2_Parameter(void);
void Select_Main_Window_8bpp(void);
void Select_Main_Window_16bpp(void);
void Select_Main_Window_24bpp(void);
//**[11h]**//
void Select_PIP1_Window_8bpp(void);
void Select_PIP1_Window_16bpp(void);
void Select_PIP1_Window_24bpp(void);
void Select_PIP2_Window_8bpp(void);
void Select_PIP2_Window_16bpp(void);
void Select_PIP2_Window_24bpp(void);
//**[12h]**//
void PCLK_Rising(void);
void PCLK_Falling(void);
void Display_ON(void);
void Display_OFF(void);
void Color_Bar_ON(void);
void Color_Bar_OFF(void);
void HSCAN_L_to_R(void);
void HSCAN_R_to_L(void);
void VSCAN_T_to_B(void);
void VSCAN_B_to_T(void);
void PDATA_Set_RGB(void);
void PDATA_Set_RBG(void);
void PDATA_Set_GRB(void);
void PDATA_Set_GBR(void);
void PDATA_Set_BRG(void);
void PDATA_Set_BGR(void);
void PDATA_IDLE_STATE(void);

//**[13h]**//
void HSYNC_Low_Active(void);
void HSYNC_High_Active(void);
void VSYNC_Low_Active(void);
void VSYNC_High_Active(void);
void DE_Low_Active(void);
void DE_High_Active(void);
void Idle_DE_Low(void);
void Idle_DE_High(void);
void Idle_PCLK_Low(void);
void Idle_PCLK_High(void);
void Idle_PDAT_Low(void);
void Idle_PDAT_High(void);
void Idle_HSYNC_Low(void);
void Idle_HSYNC_High(void);
void Idle_VSYNC_Low(void);
void Idle_VSYNC_High(void);
//**[14h][15h][1Ah][1Bh]**//
void LCD_HorizontalWidth_VerticalHeight(uint16_t WX,uint16_t HY);
//**[16h][17h]**//
void LCD_Horizontal_Non_Display(uint16_t WX);
//**[18h]**//
void LCD_HSYNC_Start_Position(uint16_t WX);
//**[19h]**//
void LCD_HSYNC_Pulse_Width(uint16_t WX);
//**[1Ch][1Dh]**//
void LCD_Vertical_Non_Display(uint16_t HY);
//**[1Eh]**//
void LCD_VSYNC_Start_Position(uint16_t HY);
//**[1Fh]**//
void LCD_VSYNC_Pulse_Width(uint16_t HY);
//**[20h][21h][22h][23h]**//
void Main_Image_Start_Address(uint32_t Addr);
//**[24h][25h]**//               
void Main_Image_Width(uint16_t WX);                   
//**[26h][27h][28h][29h]**//
void Main_Window_Start_XY(uint16_t WX,uint16_t HY);   
//**[2Ah][2Bh][2Ch][2Dh]**//
void PIP_Display_Start_XY(uint16_t WX,uint16_t HY);
//**[2Eh][2Fh][30h][31h]**//
void PIP_Image_Start_Address(uint32_t Addr);
//**[32h][33h]**//
void PIP_Image_Width(uint16_t WX);
//**[34h][35h][36h][37h]**//
void PIP_Window_Image_Start_XY(uint16_t WX,uint16_t HY);
//**[38h][39h][3Ah][3Bh]**//
void PIP_Window_Width_Height(uint16_t WX,uint16_t HY);
//**[3C]**//
void Enable_Graphic_Cursor(void);
void Disable_Graphic_Cursor(void);
void Select_Graphic_Cursor_1(void);
void Select_Graphic_Cursor_2(void);
void Select_Graphic_Cursor_3(void);
void Select_Graphic_Cursor_4(void);
void Enable_Text_Cursor(void);
void Disable_Text_Cursor(void);
void Enable_Text_Cursor_Blinking(void);
void Disable_Text_Cursor_Blinking(void);
//**[3D]**//
void Blinking_Time_Frames(uint8_t temp);
//**[3E][3Fh]**//
void Text_Cursor_H_V(uint16_t WX,uint16_t HY);
//**[40h][41h][42h][43h]**//
void Graphic_Cursor_XY(uint16_t WX,uint16_t HY);
//**[44]**//
void Set_Graphic_Cursor_Color_1(uint8_t temp);
//**[45]**//
void Set_Graphic_Cursor_Color_2(uint8_t temp);
//**[50h][51h][52h][53h]**//
void Canvas_Image_Start_address(uint32_t Addr);
//**[54h][55h]**//
void Canvas_image_width(uint16_t WX);
//**[56h][57h][58h][59h]**//
void Active_Window_XY(uint16_t WX,uint16_t HY);
//**[5Ah][5Bh][5Ch][5Dh]**//
void Active_Window_WH(uint16_t WX,uint16_t HY);
//**[5E]**//
void Select_Write_Data_Position(void);
void Select_Read_Data_Position(void);
void Memory_XY_Mode(void);
void Memory_Linear_Mode(void);
void Memory_8bpp_Mode(void);
void Memory_16bpp_Mode(void);
void Memory_24bpp_Mode(void);
//**[5Fh][60h][61h][62h]**//
void Goto_Pixel_XY(uint16_t WX,uint16_t HY);
void Goto_Linear_Addr(uint32_t Addr);
//**[63h][64h][65h][66h]**//
void Goto_Text_XY(uint16_t WX,uint16_t HY);

////////////////////////////////////////////////////////////////////////
////**** [ Function : Draw ] ****////
//**[67h]**//
void Start_Line(void);
void Start_Triangle(void);
void Start_Triangle_Fill(void);
//**[68h]~[73h]**//
void Line_Start_XY(uint16_t WX,uint16_t HY);    //�u�_�I
void Line_End_XY(uint16_t WX,uint16_t HY);         //�u���I
void Triangle_Point1_XY(uint16_t WX,uint16_t HY);  //�T��-�I1
void Triangle_Point2_XY(uint16_t WX,uint16_t HY);  //�T��-�I2
void Triangle_Point3_XY (uint16_t WX,uint16_t HY); //�T��-�I3
void Square_Start_XY(uint16_t WX,uint16_t HY);     //��_�I
void Square_End_XY(uint16_t WX,uint16_t HY);    //����I
//**[76h]**//
void Start_Circle_or_Ellipse(void);
void Start_Circle_or_Ellipse_Fill(void);
void Start_Left_Down_Curve(void);
void Start_Left_Up_Curve(void);
void Start_Right_Up_Curve(void);
void Start_Right_Down_Curve(void);
void Start_Left_Down_Curve_Fill(void);
void Start_Left_Up_Curve_Fill(void);
void Start_Right_Up_Curve_Fill(void);
void Start_Right_Down_Curve_Fill(void);
void Start_Square(void);
void Start_Square_Fill(void);
void Start_Circle_Square(void);
void Start_Circle_Square_Fill(void);
//**[77h]~[7Eh]**//
void Circle_Center_XY(uint16_t WX,uint16_t HY);          //�ꤤ��
void Ellipse_Center_XY(uint16_t WX,uint16_t HY);         //��ꤤ��
void Circle_Radius_R(uint16_t WX);                       //��b�|
void Ellipse_Radius_RxRy(uint16_t WX,uint16_t HY);       //���b�|
void Circle_Square_Radius_RxRy(uint16_t WX,uint16_t HY); //����ਤ�b�|

////////////////////////////////////////////////////////////////////////
////**** [ Function : PWM ] ****////
//**[84h]**//
void Set_PWM_Prescaler_1_to_256(uint16_t WX);
//**[85h]**//
void Select_PWM1_Clock_Divided_By_1(void);
void Select_PWM1_Clock_Divided_By_2(void);
void Select_PWM1_Clock_Divided_By_4(void);
void Select_PWM1_Clock_Divided_By_8(void);
void Select_PWM0_Clock_Divided_By_1(void);
void Select_PWM0_Clock_Divided_By_2(void);
void Select_PWM0_Clock_Divided_By_4(void);
void Select_PWM0_Clock_Divided_By_8(void);
//[85h].[bit3][bit2]
void Select_PWM1_is_ErrorFlag(void);
void Select_PWM1(void);
void Select_PWM1_is_Osc_Clock(void);
//[85h].[bit1][bit0]
void Select_PWM0_is_GPIO_C7(void);
void Select_PWM0(void);
void Select_PWM0_is_Core_Clock(void);
//**[86h]**//
//[86h]PWM1
void Enable_PWM1_Inverter(void);
void Disable_PWM1_Inverter(void);
void Auto_Reload_PWM1(void);
void One_Shot_PWM1(void);
void Start_PWM1(void);
void Stop_PWM1(void);
//[86h]PWM0
void Enable_PWM0_Dead_Zone(void);
void Disable_PWM0_Dead_Zone(void);
void Enable_PWM0_Inverter(void);
void Disable_PWM0_Inverter(void);
void Auto_Reload_PWM0(void);
void One_Shot_PWM0(void);
void Start_PWM0(void);
void Stop_PWM0(void);
//**[87h]**//
void Set_Timer0_Dead_Zone_Length(uint8_t temp);
//**[88h][89h]**//
void Set_Timer0_Compare_Buffer(uint16_t WX);
//**[8Ah][8Bh]**//
void Set_Timer0_Count_Buffer(uint16_t WX);
//**[8Ch][8Dh]**//
void Set_Timer1_Compare_Buffer(uint16_t WX);
//**[8Eh][8Fh]**//
void Set_Timer1_Count_Buffer(uint16_t WX);

////////////////////////////////////////////////////////////////////////
////**** [ Function : BTE ] ****////
//**[90h]**//

//[90h]=========================================================================
void BTE_Enable(void);
void BTE_Disable(void);

void Check_BTE_Busy(void);

void Pattern_Format_8X8(void);
void Pattern_Format_16X16(void);

//[91h]=========================================================================
void BTE_ROP_Code(uint8_t setx);
void BTE_Operation_Code(uint8_t setx);

//[92h]=========================================================================
void BTE_S0_Color_8bpp(void);
void BTE_S0_Color_16bpp(void);
void BTE_S0_Color_24bpp(void);

void BTE_S1_Color_8bpp(void);
void BTE_S1_Color_16bpp(void);
void BTE_S1_Color_24bpp(void);
void BTE_S1_Color_Constant(void);
void BTE_S1_Color_8bit_Alpha(void);
void BTE_S1_Color_16bit_Alpha(void);

void BTE_Destination_Color_8bpp(void);
void BTE_Destination_Color_16bpp(void);
void BTE_Destination_Color_24bpp(void);

//[93h][94h][95h][96h]=========================================================================
void BTE_S0_Memory_Start_Address(uint32_t Addr);   

//[97h][98h]=========================================================================
void BTE_S0_Image_Width(uint16_t WX);  

//[99h][9Ah][9Bh][9Ch]=========================================================================
void BTE_S0_Window_Start_XY(uint16_t WX,uint16_t HY); 

//[9Dh][9Eh][9Fh][A0h]=========================================================================
void BTE_S1_Memory_Start_Address(uint32_t Addr);
void S1_Constant_color_256(uint8_t temp);
void S1_Constant_color_65k(uint16_t temp);
void S1_Constant_color_16M(uint32_t temp);   

//[A1h][A2h]=========================================================================
void BTE_S1_Image_Width(uint16_t WX);  

//[A3h][A4h][A5h][A6h]=========================================================================
void BTE_S1_Window_Start_XY(uint16_t WX,uint16_t HY); 

//[A7h][A8h][A9h][AAh]=========================================================================
void BTE_Destination_Memory_Start_Address(uint32_t Addr);   

//[ABh][ACh]=========================================================================
void BTE_Destination_Image_Width(uint16_t WX);  

//[ADh][AEh][AFh][B0h]=========================================================================
void BTE_Destination_Window_Start_XY(uint16_t WX,uint16_t HY); 

//[B1h][B2h][B3h][B4h]=========================================================================
void BTE_Window_Size(uint16_t WX, uint16_t WY);

//[B5h]=========================================================================
void BTE_Alpha_Blending_Effect(uint8_t temp);


//**[B5h]**//

////////////////////////////////////////////////////////////////////////
////**** [ Function : Serial Flash ] ****////


//REG[B6h] Serial flash DMA Controller REG (DMA_CTRL) 
void Start_SFI_DMA(void);
void Check_Busy_SFI_DMA(void);

//REG[B7h] Serial Flash/ROM Controller Register (SFL_CTRL) 
void Select_SFI_0(void);
void Select_SFI_1(void);
void Select_SFI_Font_Mode(void);
void Select_SFI_DMA_Mode(void);
void Select_SFI_24bit_Address(void);
void Select_SFI_32bit_Address(void);
void Select_SFI_Waveform_Mode_0(void);
void Select_SFI_Waveform_Mode_3(void);
void Select_SFI_0_DummyRead(void);
void Select_SFI_8_DummyRead(void);
void Select_SFI_16_DummyRead(void);
void Select_SFI_24_DummyRead(void);
void Select_SFI_Single_Mode(void);
void Select_SFI_Dual_Mode0(void);
void Select_SFI_Dual_Mode1(void);

//REG[B8h] SPI master Tx /Rx FIFO Data Register (SPIDR) 
uint8_t SPI_Master_FIFO_Data_Put(uint8_t Data);
uint8_t SPI_Master_FIFO_Data_Get(void);

//REG[B9h] SPI master Control Register (SPIMCR2) 
void Mask_SPI_Master_Interrupt_Flag(void);
void Select_nSS_drive_on_xnsfcs0(void);
void Select_nSS_drive_on_xnsfcs1(void);
void nSS_Inactive(void);
void nSS_Active(void);
void OVFIRQEN_Enable(void);
void EMTIRQEN_Enable(void);
void Reset_CPOL(void);
void Set_CPOL(void);
void Reset_CPHA(void);
void Set_CPHA(void);

//REG[BAh] SPI master Status Register (SPIMSR)
uint8_t Tx_FIFO_Empty_Flag(void);
uint8_t Tx_FIFO_Full_Flag(void);
uint8_t Rx_FIFO_Empty_Flag(void);
uint8_t Rx_FIFO_full_flag(void);
uint8_t OVFI_Flag(void);
void Clear_OVFI_Flag(void);
uint8_t EMTI_Flag(void);
void Clear_EMTI_Flag(void);

//REG[BB] SPI Clock period (SPIDIV) 
void SPI_Clock_Period(uint8_t temp);


//**[BCh][BDh][BEh][BFh]**//
void SFI_DMA_Source_Start_Address(uint32_t Addr);
//**[C0h][C1h][C2h][C3h]**//
void SFI_DMA_Destination_Start_Address(uint32_t Addr);
void SFI_DMA_Destination_Upper_Left_Corner(uint16_t WX,uint16_t HY);
//**[C4h][C5h]**//
void SFI_DMA_Destination_Width(uint16_t WX);
//**[C6h][C7h][C8h][C9h]**//
void SFI_DMA_Transfer_Number(uint32_t Addr);
void SFI_DMA_Transfer_Width_Height(uint16_t WX,uint16_t HY);
//**[CAh][CBh]**//
void SFI_DMA_Source_Width(uint16_t WX);

////////////////////////////////////////////////////////////////////////
////**** [ Function : Font ] ****////
//**[CCh]**//

void Font_Select_UserDefine_Mode(void);
void CGROM_Select_Internal_CGROM(void);
void CGROM_Select_Genitop_FontROM(void);
void Font_Select_8x16_16x16(void);
void Font_Select_12x24_24x24(void);
void Font_Select_16x32_32x32(void);
void Internal_CGROM_Select_ISOIEC8859_1(void);
void Internal_CGROM_Select_ISOIEC8859_2(void);
void Internal_CGROM_Select_ISOIEC8859_3(void);
void Internal_CGROM_Select_ISOIEC8859_4(void);
//**[CDh]**//
void Enable_Font_Alignment(void);
void Disable_Font_Alignment(void);
void Font_Background_select_Transparency(void);
void Font_Background_select_Color(void);
void Font_0_degree(void);
void Font_90_degree(void);
void Font_Width_X1(void);
void Font_Width_X2(void);
void Font_Width_X3(void);
void Font_Width_X4(void);
void Font_Height_X1(void);
void Font_Height_X2(void);
void Font_Height_X3(void);
void Font_Height_X4(void);
//**[CEh]**//
void GTFont_Select_GT21L16TW_GT21H16T1W(void);
void GTFont_Select_GT23L16U2W(void);
void GTFont_Select_GT23L24T3Y_GT23H24T3Y(void);
void GTFont_Select_GT23L24M1Z(void);
void GTFont_Select_GT23L32S4W_GT23H32S4W(void);
void GTFont_Select_GT20L24F6Y(void);
void GTFont_Select_GT21L24S1W(void);
void GTFont_Select_GT22L16A1Y(void);
//**[CFh]**//
void Set_GTFont_Decoder(uint8_t temp);
//**[D0h]**//
void Font_Line_Distance(uint8_t temp);
//**[D1h]**//
void Set_Font_to_Font_Width(uint8_t temp);
//**[D2h]~[D4h]**//
void Foreground_RGB(uint8_t RED,uint8_t GREEN,uint8_t BLUE);
void Foreground_color_256(uint8_t temp);
void Foreground_color_65k(uint16_t temp);
void Foreground_color_16M(uint32_t temp);
//**[D5h]~[D7h]**//
void Background_RGB(uint8_t RED,uint8_t GREEN,uint8_t BLUE);
void Background_color_256(uint8_t temp);
void Background_color_65k(uint16_t temp);
void Background_color_16M(uint32_t temp);
//**[DBh]~[DEh]**//
void CGRAM_Start_address(uint32_t Addr);
//**[DFh]**//
void Power_Normal_Mode(void);
void Power_Saving_Standby_Mode(void);
void Power_Saving_Suspend_Mode(void);
void Power_Saving_Sleep_Mode(void);

////////////////////////////////////////////////////////////////////////
////**** [ Function : SDRAM ] ****////
//**[E0h]~[E4h]**//
// �����g�b RA8876_Select_SDRAM();


////////////////////////////////////////////////////////////////////////
////**** [ Function : I2C ] ****////
/*�t�~�إߧ���I2C In/Out ���n��*/
//**[E5h]~[EAh]**//
void RA8876_I2CM_Clock_Prescale(uint16_t WX);
//**[E7h]**//
void RA8876_I2CM_Transmit_Data(uint8_t temp);
//**[E8h]**//
uint8_t RA8876_I2CM_Receiver_Data(void);
//**[E9h]**//
 
void RA8876_I2CM_Read_With_Ack(void);
void RA8876_I2CM_Read_With_Nack(void);
void RA8876_I2CM_Write_With_Start(void);
void RA8876_I2CM_Write(void);
void RA8876_I2CM_Stop(void);
 

//**[EAh]**//
uint8_t RA8876_I2CM_Check_Slave_ACK(void);
uint8_t RA8876_I2CM_Bus_Busy(void);
uint8_t RA8876_I2CM_transmit_Progress(void);
uint8_t RA8876_I2CM_Arbitration(void);



////////////////////////////////////////////////////////////////////////
////**** [ Function : GPIO ] ****////
//[F0h][F1h]
void Set_GPIO_A_In_Out(uint8_t temp);
void Write_GPIO_A_7_0(uint8_t temp);
uint8_t Read_GPIO_A_7_0(void);
//[F2h]
void Write_GPIO_B_7_4(uint8_t temp);
uint8_t Read_GPIO_B_7_0(void);
//[F3h][F4h]
void Set_GPIO_C_In_Out(uint8_t temp);
void Write_GPIO_C_7_0(uint8_t temp);
uint8_t Read_GPIO_C_7_0(void);
//[F5h][F6h]
void Set_GPIO_D_In_Out(uint8_t temp);
void Write_GPIO_D_7_0(uint8_t temp);
uint8_t Read_GPIO_D_7_0(void);
//[F7h][F8h]
void Set_GPIO_E_In_Out(uint8_t temp);
void Write_GPIO_E_7_0(uint8_t temp);
uint8_t Read_GPIO_E_7_0(void);
//[F9h][FAh]
void Set_GPIO_F_In_Out(uint8_t temp);
void Write_GPIO_F_7_0(uint8_t temp);
uint8_t Read_GPIO_F_7_0(void);


////////////////////////////////////////////////////////////////////////
////**** [ Function : Key ] ****////
//**[FBh]~[FFh]**//
//[FBh]
void Long_Key_enable(void);
void Key_Scan_Freg(uint8_t temp);   //set bit2~0 

//[FCh]
void Key_Scan_Wakeup_Function_Enable(void);
void Long_Key_Timing_Adjustment(uint8_t setx);//set bit5~3
uint8_t Numbers_of_Key_Hit(void);

//[FDh][FEh][FFh]
uint8_t Read_Key_Strobe_Data_0(void);
uint8_t Read_Key_Strobe_Data_1(void);
uint8_t Read_Key_Strobe_Data_2(void);

void Show_String(char *str);
void Show_picture(uint32_t numbers,const uint16_t *datap);
void LCD_Clear(uint16_t Color);
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos);
  void LCD_PutChar(uint16_t x,uint16_t y,uint8_t c,uint16_t charColor,uint16_t bkColor);
void LCD_DisplayString(uint16_t X,uint16_t Y, char *ptr, uint16_t charColor, uint16_t bkColor);
void LCD_SetPoint(uint16_t x,uint16_t y,uint16_t point);
 void LCD_WriteRAM_Prepare(void);
void RA8876_HW_Reset(void);

 void Graphic_cursor_initial(void);
void Show_picture(uint32_t numbers,const uint16_t *datap);

void RA8876_IO_Init(void);

#endif
